{"version":3,"sources":["img/github.png","components/Header.js","components/Presentation.js","components/List.js","components/ListItem.js","components/Home.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","href","src","Presentation","List","author","url","download_url","alt","target","ListItem","props","listProduct","filteredAndSortedList","map","product","index","key","Home","useState","filterList","searchResults","setSearchResults","useEffect","fetch","then","resp","json","Footer","git","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,oC,gICyB5BC,G,KAtBA,WAEX,OACI,oCACI,4BAAQC,UAAU,UACd,yBAAKA,UAAU,oBACX,wBAAIA,UAAU,gBAAd,eAEA,wBAAIA,UAAU,cACV,wBAAIA,UAAU,eACV,uBAAGC,KAAK,IAAIC,IAAI,GAAGF,UAAU,eAA7B,UAEJ,wBAAIA,UAAU,eACV,uBAAGC,KAAK,IAAIC,IAAI,GAAGF,UAAU,eAA7B,gBCJbG,EATM,WAEjB,OACI,oCACI,uBAAGH,UAAU,oBAAb,yF,OCWGI,G,KAfF,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,OAAOC,EAAuB,EAAvBA,IAAKC,EAAkB,EAAlBA,aAGvB,OACI,oCACI,yBAAKP,UAAU,sBACX,yBAAKE,IAAKK,EAAcC,IAAI,IAAGR,UAAU,iBAEzC,uBAAGA,UAAU,sBAAsBK,GACnC,uBAAGJ,KAAMK,EAAKN,UAAU,iBAAiBS,OAAO,UAAhD,kBCEDC,EAVE,SAACC,GACd,IAAMC,EAAcD,EAAME,sBAAsBC,KAAK,SAACC,EAASC,GAAV,OACjD,kBAAC,EAAD,iBAAUD,EAAV,CAAqBE,IAAKD,QAG9B,OACI,yBAAKhB,UAAU,YAAYY,ICoBpBM,EA1BF,WAAO,IAAD,EAC2BC,mBAAS,CAC/CP,YAAa,GACbQ,WAAY,KAHD,mBACRC,EADQ,KACOC,EADP,KAmBf,OAbAC,qBAAU,WACNC,MAAM,iCAAiCC,MACnC,SAAAC,GACEA,EAAKC,OAAOF,MAAK,SAAAE,GACfA,GAAQL,EAAiB,CACvBV,YAAae,EACbP,WAAYO,YAKvB,IAGC,yBAAK3B,UAAU,sBACX,kBAAC,EAAD,CAAUa,sBAAuBQ,EAAcD,e,wBCT5CQ,EAZA,WACX,OACI,oCACI,4BAAQ5B,UAAU,UACd,uBAAGC,KAAK,gCAAgCD,UAAU,cAAcS,OAAO,UACnE,yBAAKP,IAAK2B,IAAKrB,IAAI,GAAGR,UAAU,mBCSrC8B,MAXf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.69a75fa7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.d22ee372.png\";","import React from \"react\"\r\nimport \"./../styles/header.css\"\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <>\r\n            <header className=\"header\">\r\n                <div className=\"header-container\">\r\n                    <h1 className=\"header-title\">Lorem Ipsum</h1>\r\n\r\n                    <ul className=\"header-nav\">\r\n                        <li className=\"header-item\">\r\n                            <a href=\"#\" src=\"\" className=\"header-link\">Lorem</a>\r\n                        </li>\r\n                        <li className=\"header-item\">\r\n                            <a href=\"#\" src=\"\" className=\"header-link\">Lorem</a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </header>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from \"react\"\r\nimport \"./../styles/header.css\"\r\n\r\nconst Presentation = () => {\r\n\r\n    return (\r\n        <>\r\n            <p className=\"header-paragraph\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aliquid ex ratione veniam</p>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Presentation","import React from \"react\"\r\nimport \"./../styles/productList.css\"\r\n\r\nconst List = ({author,url, download_url}) => {\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"itemList-container\">\r\n                <img src={download_url} alt=\" \"className=\"itemList-img\"/>\r\n\r\n                <p className=\"itemList-paragraph\">{author}</p>\r\n                <a href={url} className=\"itemList-boton\" target=\"_blank\">Ver imagen</a>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default List","import React from \"react\"\r\nimport \"./../styles/productList.css\"\r\nimport List from './List'\r\n\r\nconst ListItem = (props) => {\r\n    const listProduct = props.filteredAndSortedList.map( (product, index) => (\r\n        <List {...product }  key={index}/>\r\n    ))\r\n\r\n    return (\r\n        <div className=\"itemList\">{listProduct}</div>\r\n    )\r\n}\r\n\r\nexport default ListItem","import React, {useState, useEffect} from \"react\"\r\nimport \"./../styles/productList.css\"\r\nimport ListItem from \"./ListItem\"\r\n\r\nconst Home = () => {\r\n    const [searchResults, setSearchResults] = useState({\r\n        listProduct: [],\r\n        filterList: [],\r\n      })\r\n\r\n    useEffect(() => {\r\n        fetch(`https://picsum.photos/v2/list`).then(\r\n            resp => {\r\n              resp.json().then(json => {\r\n                json && setSearchResults({\r\n                  listProduct: json,\r\n                  filterList: json\r\n                })\r\n              })\r\n            }\r\n          )\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"itemList-container\">\r\n            <ListItem filteredAndSortedList={searchResults.filterList}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React from \"react\"\r\nimport \"./../styles/footer.css\"\r\nimport git from \"./../img/github.png\"\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <>\r\n            <footer className=\"footer\">\r\n                <a href=\"https://github.com/minabeluwu\" className=\"footer-link\" target=\"_blank\">\r\n                    <img src={git} alt=\"\" className=\"footer-img\"/>\r\n                </a>\r\n            </footer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Footer","import React from 'react';\nimport Header from \"./components/Header\"\nimport Presentation from \"./components/Presentation\"\nimport Home from \"./components/Home\"\nimport Footer from \"./components/Footer\"\nimport \"./styles/header.css\"\n\nfunction App() {\n  return (\n    <>\n      <Header/>\n      <Presentation/>\n      <Home />\n      <Footer/>        \n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}